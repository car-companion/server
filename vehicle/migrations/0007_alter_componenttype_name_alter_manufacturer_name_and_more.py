# Generated by Django 5.1.2 on 2024-11-03 19:38

import django.core.validators
import django.db.models.deletion
import vehicle.models.vehicle
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('vehicle', '0006_alter_vehiclecomponent_unique_together'),
    ]

    operations = [
        migrations.AlterField(
            model_name='componenttype',
            name='name',
            field=models.CharField(error_messages={'blank': 'Component type name cannot be blank.', 'unique': 'A component type with this name already exists.'}, help_text='Name of the component type (e.g., engine, window)', max_length=100, unique=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='manufacturer',
            name='name',
            field=models.CharField(error_messages={'blank': 'Manufacturer name cannot be blank.', 'unique': 'A manufacturer with this name already exists.'}, help_text='The name of the vehicle brand', max_length=100, unique=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='interior_color',
            field=models.ForeignKey(error_messages={'invalid': 'Select a valid interior color.', 'null': 'Interior color is required.'}, help_text='Vehicle interior color', on_delete=django.db.models.deletion.PROTECT, related_name='vehicle_interior_color', to='vehicle.color', verbose_name='Interior Color'),
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='model',
            field=models.ForeignKey(error_messages={'invalid': 'Select a valid vehicle model.', 'null': 'Vehicle model is required.'}, help_text='Vehicle model', on_delete=django.db.models.deletion.PROTECT, related_name='vehicles', to='vehicle.vehiclemodel', verbose_name='Model'),
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='nickname',
            field=models.CharField(blank=True, error_messages={'max_length': 'Nickname cannot be longer than 100 characters.'}, help_text='Optional nickname for the vehicle', max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Nickname can only contain letters, numbers, spaces, and hyphens.', regex='^[a-zA-Z0-9\\s\\-]*$')], verbose_name='Nickname'),
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='outer_color',
            field=models.ForeignKey(error_messages={'invalid': 'Select a valid exterior color.', 'null': 'Exterior color is required.'}, help_text='Vehicle exterior color', on_delete=django.db.models.deletion.PROTECT, related_name='vehicle_outer_color', to='vehicle.color', verbose_name='Exterior Color'),
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='vin',
            field=models.CharField(error_messages={'blank': 'VIN cannot be blank.', 'invalid': 'Enter a valid VIN.', 'max_length': 'VIN must be exactly 17 characters.', 'min_length': 'VIN must be exactly 17 characters.', 'null': 'VIN is required.', 'unique': 'A vehicle with this VIN already exists.'}, help_text='17-character Vehicle Identification Number', max_length=17, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(17), django.core.validators.MaxLengthValidator(17), django.core.validators.RegexValidator(message='Enter a valid 17-character VIN. Letters I, O, and Q are not allowed.', regex='^[A-HJ-NPR-Z0-9]{17}$')], verbose_name='VIN'),
        ),
        migrations.AlterField(
            model_name='vehicle',
            name='year_built',
            field=models.IntegerField(error_messages={'invalid': 'Enter a valid year.', 'null': 'Year built is required.'}, help_text='Year the vehicle was manufactured', validators=[django.core.validators.MinValueValidator(1886, message='Year must be 1886 or later.'), django.core.validators.MaxValueValidator(vehicle.models.vehicle.get_max_year, message='Year cannot be in the future.')], verbose_name='Year Built'),
        ),
        migrations.AlterField(
            model_name='vehiclecomponent',
            name='component_type',
            field=models.ForeignKey(error_messages={'null': 'Component type is required.'}, help_text='Type of this component', on_delete=django.db.models.deletion.PROTECT, related_name='vehicle_components', to='vehicle.componenttype', verbose_name='component type'),
        ),
        migrations.AlterField(
            model_name='vehiclecomponent',
            name='name',
            field=models.CharField(error_messages={'blank': 'Component name cannot be blank.'}, help_text='Name of the component', max_length=200, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='vehiclecomponent',
            name='vehicle',
            field=models.ForeignKey(error_messages={'null': 'Vehicle is required.'}, help_text='Vehicle this component belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='components', to='vehicle.vehicle', verbose_name='vehicle'),
        ),
        migrations.AlterField(
            model_name='vehiclemodel',
            name='manufacturer',
            field=models.ForeignKey(error_messages={'null': 'Manufacturer is required.'}, help_text='Manufacturer this model belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='models', to='vehicle.manufacturer'),
        ),
        migrations.AlterField(
            model_name='vehiclemodel',
            name='name',
            field=models.CharField(error_messages={'blank': 'Model name cannot be blank.'}, help_text='The name of the vehicle model', max_length=100, verbose_name='name'),
        ),
        migrations.AddIndex(
            model_name='componenttype',
            index=models.Index(fields=['name'], name='component_type_name_idx'),
        ),
        migrations.AddIndex(
            model_name='manufacturer',
            index=models.Index(fields=['name'], name='manufacturer_name_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['outer_color'], name='vehicle_outer_color_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['interior_color'], name='vehicle_interior_color_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['name'], name='vehicle_component_name_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['component_type'], name='vehicle_component_type_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['vehicle'], name='vehicle_component_vehicle_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['status'], name='vehicle_component_status_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclemodel',
            index=models.Index(fields=['name'], name='vehicle_model_name_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclemodel',
            index=models.Index(fields=['manufacturer'], name='vehicle_model_manufacturer_idx'),
        ),
        migrations.AlterModelTable(
            name='componenttype',
            table='component_types',
        ),
        migrations.AlterModelTable(
            name='manufacturer',
            table='manufacturers',
        ),
        migrations.AlterModelTable(
            name='vehiclecomponent',
            table='vehicle_components',
        ),
        migrations.AlterModelTable(
            name='vehiclemodel',
            table='vehicle_models',
        ),
    ]
