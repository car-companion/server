# Generated by Django 5.1.4 on 2024-12-16 20:10

import colorfield.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Color name cannot be blank.', 'unique': 'A color with this name already exists.'}, help_text='The name of the color - must be unique', max_length=50, unique=True, verbose_name='color name')),
                ('hex_code', colorfield.fields.ColorField(default='#FFFFFF', help_text='Color in hexadecimal format', image_field=None, max_length=25, samples=['#1E40AF', '#047857', '#B91C1C', '#FFFFFF', '#000000', '#6B7280', '#92400E'], verbose_name='color code')),
                ('is_metallic', models.BooleanField(default=False, help_text='Indicates if the color has a metallic finish', verbose_name='metallic finish')),
                ('description', models.TextField(blank=True, help_text='Additional details about the color', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'Color',
                'verbose_name_plural': 'Colors',
                'db_table': 'vehicle_colors',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='color_name_idx')],
            },
        ),
        migrations.CreateModel(
            name='ComponentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Component type name cannot be blank.', 'unique': 'A component type with this name already exists.'}, help_text='Name of the component type (e.g., engine, window)', max_length=100, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, help_text='Description of this component type', verbose_name='description')),
            ],
            options={
                'verbose_name': 'Component Type',
                'verbose_name_plural': 'Component Types',
                'db_table': 'component_types',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='component_type_name_idx')],
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Manufacturer name cannot be blank.', 'unique': 'A manufacturer with this name already exists.'}, help_text='The name of the vehicle brand', max_length=100, unique=True, verbose_name='name')),
                ('country_code', models.CharField(error_messages={'blank': 'Country code cannot be blank.', 'invalid': 'Enter a valid country code (2 uppercase letters).'}, help_text="ISO 3166-1 alpha-2 country code (e.g., 'DE' for Germany)", max_length=2, validators=[django.core.validators.RegexValidator(message='Country code must be exactly 2 uppercase letters.', regex='^[a-zA-Z]{2}$')], verbose_name='country code')),
                ('website_url', models.URLField(blank=True, error_messages={'invalid': 'Enter a valid URL.'}, help_text='Official manufacturer website URL', max_length=255, null=True, validators=[django.core.validators.URLValidator()], verbose_name='website URL')),
                ('description', models.TextField(blank=True, help_text='Description of the manufacturer', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'Manufacturer',
                'verbose_name_plural': 'Manufacturers',
                'db_table': 'manufacturers',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='manufacturer_name_idx'), models.Index(fields=['country_code'], name='manufacturer_country_idx')],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('vin', models.CharField(error_messages={'blank': 'VIN cannot be blank.', 'invalid': 'Enter a valid VIN.', 'max_length': 'VIN must be exactly 17 characters.', 'min_length': 'VIN must be exactly 17 characters.', 'null': 'VIN is required.', 'unique': 'A vehicle with this VIN already exists.'}, help_text='17-character Vehicle Identification Number', max_length=17, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(17), django.core.validators.MaxLengthValidator(17), django.core.validators.RegexValidator(message='Enter a valid 17-character VIN. Letters I, O, and Q are not allowed.', regex='^[A-HJ-NPR-Z0-9]{17}$')], verbose_name='VIN')),
                ('year_built', models.IntegerField(error_messages={'invalid': 'Enter a valid year.', 'null': 'Year built is required.'}, help_text='Year the vehicle was manufactured', validators=[django.core.validators.MinValueValidator(1886, message='Year must be 1886 or later.'), django.core.validators.MaxValueValidator(2025, message='Year cannot be in the future.')], verbose_name='Year Built')),
                ('nickname', models.CharField(blank=True, error_messages={'max_length': 'Nickname cannot be longer than 100 characters.'}, help_text='Optional nickname for the vehicle', max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Nickname can only contain letters, numbers, spaces, and hyphens.', regex='^[a-zA-Z0-9\\s\\-]*$')], verbose_name='Nickname')),
                ('interior_color', models.ForeignKey(error_messages={'invalid': 'Select a valid interior color.', 'null': 'Interior color is required.'}, help_text='Vehicle interior color', on_delete=django.db.models.deletion.PROTECT, related_name='vehicle_interior_color', to='car_companion.color', verbose_name='Interior Color')),
                ('outer_color', models.ForeignKey(error_messages={'invalid': 'Select a valid exterior color.', 'null': 'Exterior color is required.'}, help_text='Vehicle exterior color', on_delete=django.db.models.deletion.PROTECT, related_name='vehicle_outer_color', to='car_companion.color', verbose_name='Exterior Color')),
                ('owner', models.ForeignKey(blank=True, error_messages={'invalid': 'Select a valid vehicle model.'}, help_text='Owner of the vehicle', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicle_owner', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vehicles',
                'ordering': ['-year_built', 'model'],
                'permissions': (('is_owner', 'Can control everything'),),
            },
        ),
        migrations.CreateModel(
            name='VehicleComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(error_messages={'blank': 'Component name cannot be blank.'}, help_text='Name of the component', max_length=200, verbose_name='name')),
                ('status', models.FloatField(blank=True, default=0.0, help_text='Current status of the component (0.0-1.0)', null=True, validators=[django.core.validators.MinValueValidator(0.0, 'Status cannot be less than 0'), django.core.validators.MaxValueValidator(1.0, 'Status cannot be greater than 1')], verbose_name='status')),
                ('component_type', models.ForeignKey(error_messages={'null': 'Component type is required.'}, help_text='Type of this component', on_delete=django.db.models.deletion.PROTECT, related_name='vehicle_components', to='car_companion.componenttype', verbose_name='component type')),
                ('vehicle', models.ForeignKey(error_messages={'null': 'Vehicle is required.'}, help_text='Vehicle this component belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='components', to='car_companion.vehicle', verbose_name='vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle Component',
                'verbose_name_plural': 'Vehicle Components',
                'db_table': 'vehicle_components',
                'ordering': ['vehicle', 'component_type__name'],
                'permissions': [('view_status', 'Can view component status'), ('change_status', 'Can change component status')],
            },
        ),
        migrations.CreateModel(
            name='ComponentPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('permission_type', models.CharField(choices=[('read', 'Read Only'), ('write', 'Read & Write')], help_text='Level of access granted', max_length=5, verbose_name='permission type')),
                ('valid_until', models.DateTimeField(blank=True, help_text='When this permission expires (optional)', null=True, verbose_name='valid until')),
                ('granted_by', models.ForeignKey(help_text='User who granted this permission', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_permissions', to=settings.AUTH_USER_MODEL, verbose_name='granted by')),
                ('user', models.ForeignKey(help_text='User receiving the permission', on_delete=django.db.models.deletion.CASCADE, related_name='component_permissions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('component', models.ForeignKey(help_text='Component this permission applies to', on_delete=django.db.models.deletion.CASCADE, related_name='access_permissions', to='car_companion.vehiclecomponent', verbose_name='component')),
            ],
            options={
                'verbose_name': 'Component Permission',
                'verbose_name_plural': 'Component Permissions',
                'ordering': ['-created'],
                'permissions': (('can_grant_access', 'Can grant component access'), ('can_revoke_access', 'Can revoke component access')),
            },
        ),
        migrations.CreateModel(
            name='VehicleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Model name cannot be blank.'}, help_text='The name of the vehicle model', max_length=100, verbose_name='name')),
                ('manufacturer', models.ForeignKey(error_messages={'null': 'Manufacturer is required.'}, help_text='Manufacturer this model belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='models', to='car_companion.manufacturer')),
            ],
            options={
                'verbose_name': 'Vehicle Model',
                'verbose_name_plural': 'Vehicle Models',
                'db_table': 'vehicle_models',
                'ordering': ['manufacturer__name', 'name'],
            },
        ),
        migrations.AddField(
            model_name='vehicle',
            name='model',
            field=models.ForeignKey(error_messages={'invalid': 'Select a valid vehicle model.', 'null': 'Vehicle model is required.'}, help_text='Vehicle model', on_delete=django.db.models.deletion.PROTECT, related_name='vehicles', to='car_companion.vehiclemodel', verbose_name='Model'),
        ),
        migrations.CreateModel(
            name='ModelComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Component name cannot be blank.'}, help_text='Name of the default component', max_length=200, verbose_name='name')),
                ('component_type', models.ForeignKey(help_text='Type of this component', on_delete=django.db.models.deletion.PROTECT, related_name='model_components', to='car_companion.componenttype', verbose_name='component type')),
                ('model', models.ForeignKey(help_text='Model this component belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='default_components', to='car_companion.vehiclemodel', verbose_name='vehicle model')),
            ],
            options={
                'verbose_name': 'Model Component',
                'verbose_name_plural': 'Model Components',
                'db_table': 'model_components',
                'ordering': ['model', 'component_type__name'],
            },
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['name'], name='vehicle_component_name_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['component_type'], name='vehicle_component_type_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['vehicle'], name='vehicle_component_vehicle_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclecomponent',
            index=models.Index(fields=['status'], name='vehicle_component_status_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehiclecomponent',
            unique_together={('vehicle', 'component_type', 'name')},
        ),
        migrations.AddIndex(
            model_name='componentpermission',
            index=models.Index(fields=['component', 'user'], name='component_perm_comp_user_idx'),
        ),
        migrations.AddIndex(
            model_name='componentpermission',
            index=models.Index(fields=['valid_until'], name='component_perm_valid_until_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='componentpermission',
            unique_together={('component', 'user')},
        ),
        migrations.AddIndex(
            model_name='vehiclemodel',
            index=models.Index(fields=['name'], name='model_name_idx'),
        ),
        migrations.AddIndex(
            model_name='vehiclemodel',
            index=models.Index(fields=['manufacturer'], name='model_manufacturer_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehiclemodel',
            unique_together={('name', 'manufacturer')},
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['year_built'], name='vehicle_year_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['model'], name='vehicle_model_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['outer_color'], name='vehicle_outer_color_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['interior_color'], name='vehicle_interior_color_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='modelcomponent',
            unique_together={('model', 'name', 'component_type')},
        ),
    ]
