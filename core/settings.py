"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ
from django.conf.global_settings import INTERNAL_IPS, EMAIL_USE_SSL
from django.conf.urls.static import static

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env from the root of the project
environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS")

# Application definition

INSTALLED_APPS = [
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "debug_toolbar",
    "rest_framework",
    'django_filters',
    "djoser",
    'drf_spectacular',
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.migrations',
    'colorfield',
    'vehicle',
    'authentication'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env("DB_ENGINE"),
        "NAME": env("DB_NAME"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        #    Ensures that Passwords must not be too similar to the user's attributes.
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        #     Ensures that Passwords must be at least 8 characters long.
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        #     Ensures that Passwords are not common passwords.
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        #     Ensures that Passwords must not only be numeric.
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Debug toolbar settings
INTERNAL_IPS = [
    "127.0.0.1",
]

# Rest framework + Djoser settings
REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
}

DJOSER = {
    'LOGIN_FIELD': 'email',
    'SEND_ACTIVATION_EMAIL': True,
    'ACTIVATION_URL': 'api/auth/users/activate/{uid}/{token}/',
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserRegistrationSerializer',
    },
    'EMAIL': {
        'activation': 'authentication.emails.CustomActivationEmail',
    },
}

# Email settings (some fields might need to be changed as they were used like this to test the email verification feature)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 'smtp' must be set to 'console' if debugging on the terminal needed
EMAIL_HOST = 'localhost'  # Must be set to the email provider's SMTP server (use localhost to use smtp4dev)
EMAIL_PORT = 25
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = 'test@example.com'
#EMAIL_HOST_USER = 'your-email@gmail.com'  # Replace with email
#EMAIL_HOST_PASSWORD = 'your-email-password'  # Replace with your email's app password

# Frontend settings for activation link
FRONTEND_URL = 'http://localhost:8000'  # Must be set to our frontend domain

# Templates for emails sent to user for account activation
TEMPLATED_EMAIL_BACKEND = 'templated_email.backends.vanilla_django.TemplateBackend'
TEMPLATED_EMAIL_FILE_EXTENSION = 'html'  # Email templates will use the .html extension
#TEMPLATED_EMAIL_TEMPLATE_DIR = 'templates/'  # Base directory for email templates (inside the 'templates' folder)



# OpenAPI schema generation
SPECTACULAR_SETTINGS = {
    'TITLE': 'Car Companion API',
    'DESCRIPTION': 'API for Car Companion project',
    'VERSION': '1.0.0',
    # 'SERVE_INCLUDE_SCHEMA': False,
}

# Unfold settings
UNFOLD = {
    "SITE_TITLE": "Car Companion",
    "SITE_HEADER": "Car Companion",
    "SITE_URL": "/",
    "SITE_ICON": None,  # Add your icon path if needed
}
